# Access Log Formatting
log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';


# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

access_log off;

{{ if (exists "/etc/nginx/proxy.conf") }}
include /etc/nginx/proxy.conf;
{{ else }}
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;

# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";
{{ end }}

server {
  server_name _; # This is just an invalid value which will never trigger on a real hostname.
  listen 80;
  access_log /var/log/nginx/access.log vhost;
  return 503;
}

## ACME CHALLENGE -------
{{range $domain, $services := services | groupByLabel "rgon-acme" -}}
upstream acmetool {
  {{range $serv := $services}}{{range $cnt := .Containers -}}

    {{range $port := $serv.Ports}}
      server {{$cnt.Address}}:{{$port.InternalPort}};
    {{- end}}

  {{- end}}{{- end}}
}
{{end}}

## HOSTS ----------------
{{range $domain, $hosts := hosts | groupByLabel "rgon.domain" -}}
  {{range $host := $hosts}}
upstream {{$domain}}{
  server {{$host.Address}}:{{$host.Labels.GetValue "rgon.port" "8080"}};
}
server{
  server_name {{$domain}};
  listen 80;
  access_log /var/log/nginx/access.log vhost;
  location / {
    proxy_pass http://{{$domain}};
  }
}
  {{end}}
{{end}}

## SERVICES --------------
{{range $domain, $services := services | groupByLabel "rgon.domain" -}}
{{/* Assume that domains are unique; {{ len $services }} should be 1 */}}
{{range $serv := $services}}

{{ $redirect_target := or $serv.Labels.GetValue "rgon.redirect" "http" }}
{{ $has_certs := ( and (exists (printf "/etc/nginx/certs/%s/fullchain" $domain)) (exists (printf "/etc/nginx/certs/%s/privkey" $domain)) ) }}

upstream {{$domain}} {
  {{range $cnt := .Containers -}}
    {{- $defaultPort := "80"}}
    {{- $port := where $serv.Ports "InternalPort" $defaultPort }}
    {{- if .Labels.Exists "rgon.port" }}
      server {{$cnt.Address}}:{{$cnt.Labels.GetValue "rgon.port"}};
    {{- else }}
      {{- $portLen := len $serv.Ports -}}
      {{- if eq $portLen 0}}
      server {{$cnt.Address}} down;
      {{ else }}
        {{- range $p := $port }}
          server {{$cnt.Address}}:{{ $p.InternalPort }};
        {{ end -}}
      {{ end -}}
    {{ end -}}
  {{- end}}
}
server{
  server_name {{$domain}};
  listen 80;
  access_log /var/log/nginx/access.log vhost;

  location ^~ /.well-known/acme-challenge/ {
    proxy_pass http://acmetool;
  }

{{- if (and ($has_certs) (eq $redirect_target "https") }}
  return 301 https://{{$domain}}$request_uri;
{{ else }}
  location / {
    proxy_pass http://{{$domain}};
  }
{{ end -}}
}



{{- if $has_certs }}
server {
  server_name {{ $domain }};
  listen 443 ssl http2 ;
  access_log /var/log/nginx/access.log vhost;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

  ssl_prefer_server_ciphers on;
  ssl_session_timeout 5m;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;

  ssl_certificate /etc/nginx/certs/{{ $domain }}/fullchain;
  ssl_certificate_key /etc/nginx/certs/{{ $domain }}/privkey;

  {{- if (exists "/etc/nginx/certs/dhparam.pem") }}
  ssl_dhparam /etc/nginx/certs/dhparam.pem;
  {{ end -}}

  {{- if eq $redirect_target "https") }}
  add_header Strict-Transport-Security "max-age=31536000";
  {{ end -}}

  {{- if (exists (printf "/etc/nginx/vhost.d/%s" $domain)) }}
  include {{ printf "/etc/nginx/vhost.d/%s" $domain }};
  {{ else if (exists "/etc/nginx/vhost.d/default") }}
  include /etc/nginx/vhost.d/default;
  {{ end -}}

  location / {
    proxy_pass http://{{$domain}};
    {{ if (exists (printf "/etc/nginx/htpasswd/%s" $domain)) }}
    auth_basic  "Restricted {{ $domain }}";
    auth_basic_user_file  {{ (printf "/etc/nginx/htpasswd/%s" $domain) }};
    {{ end -}}
                {{- if (exists (printf "/etc/nginx/vhost.d/%s_location" $domain)) }}
                include {{ printf "/etc/nginx/vhost.d/%s_location" $domain}};
                {{- else if (exists "/etc/nginx/vhost.d/default_location") }}
                include /etc/nginx/vhost.d/default_location;
                {{ end }}
  }
}
{{ end }}{{/* ssl block */}}
{{ end }}{{/* range $serv */}}
{{ end }}{{/* range $services */}}
